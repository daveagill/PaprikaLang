type elem
{
	data string
	id number
	prev elem
}

type linkedlist
{
	head elem
	size number
}

// total hack for generating a null element in
// a language that isn't supposed to support null :D
func NullElem() -> elem
{
	if 0 > 1 { NullElem() }
}

func Append(lst linkedlist, data string) -> linkedlist
{
	let newHead elem = elem{data, lst.size, lst.head}
	linkedlist{newHead, lst.size+1}
}

func EmptyList() -> linkedlist
{
	linkedlist{NullElem(), 0}
}

func ElemChainToString(e elem) -> string
{
	if e.id == 0 { "" } else { ElemChainToString(e.prev) .. ", " } .. e.data
}

func ToString(lst linkedlist) -> string
{
	"linkedlist[" .. lst.size .. "] = {" .. ElemChainToString(lst.head) .. "}"
}

func Main() -> string
{
	let mylist linkedlist = EmptyList()
		then Append(mylist, "first")
		then Append(mylist, "second")
		then Append(mylist, "third")
		then Append(mylist, "fourth")

	ToString(mylist)
}